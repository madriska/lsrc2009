== Sinatra code-reading exercise

* Testing framework and tests
  - What testing framework does Sinatra use?
    - Where does the +it+ method come from?
    - OK, then where does +test+ come from? That's not vanilla Test::Unit.
      * show use of +ack+ for code pickaxeing
        $ ack "def self.test"
    > test/contest.rb
      - What is the +self.context+ method doing, in Test::Unit terms?
        * Note: "magic" Class#name; the const_set() has action-at-a-distance
            i = Class.new
            MyClass = i
            i.name # => "MyClass"
  > test/base_test.rb
    - Why are the examples interleaved with the class definition?
      - Does it matter that the class definition is broken up?
      - Is the test code run during or after the execution of base_test.rb?
        - What actually happens immediately when an +it+ block is run?
  - How does "assert ok?" or "assert redirect?" work?
    > test/helper.rb: method_missing delegates to +response+.
  - When two +before+ filters are defined, in what order do they run?
    > test/filter_test.rb
  > test/routing_test.rb
    - Routes can take conditions. How does this work?
        user_agent(/Foo/)
        get '/foo' do
          'foo'
        end

        get '/foo' do
          'not foo'
        end
        TODO
  > test/route_added_hook_test.rb
    - What role does RouteAddedTest play?
  - What sort of support does Sinatra have for conditional GET?
    * Last-Modified, ETag
    - If you understand how these features work, how do you use them in Sinatra?
      > test/helpers_test.rb: +last_modified+ and +etag+
* General
  * Note the combined getters / setters: (base.rb:60)
      def status(value=nil)
        response.status = value if value
        response.status
      end
  - Routes, along with other options, are passed down from superclass to
    subclass. How does this work? 
  - What is the purpose of this bit of convoluted code? (base.rb:67)
      def body(value=nil, &block)
        if block_given?
          def block.each ; yield call ; end
          response.body = block
        else
          response.body = value
        end
      end
  - How do the ivars get passed through to the renderer?
      get "/" do
        @text = "Hello, world!"
        haml %{%p= @text}
      end
  * Freakin' sweet: Sinatra::Base#forward (using modular Sinatra app as Rack
    middleware). 
    http://www.slideshare.net/benschwarz/sinatra-rack-and-middleware-1509268
  - What is required to write and register an extension with Sinatra? Can you
    describe the extension API just by reading the code?
    > base.rb:855 et al. -- just a module, nothing specific. Optional imeths
      implement hook callbacks. Sinatra calls #registered(self) when the module
      is registered.
* Plumbing
  - Why does +Sinatra::Base#call+ dup itself and then call #call! ? (base.rb:360)
  - A Sinatra app can be really simple. What makes this start a server?
      # my_app.rb
      require 'sinatra'
      get('/') { "Hello, World!" }
    - When this syntax is used, what actually happens at the modular Sinatra
      level? In other words, where / how is the actual Sinatra app created?
      - Since "require 'sinatra'" in a Ruby file starts a server using the
        "classic" Sinatra interface, why doesn't it start a server when required
        directly from irb?
  - How does Sinatra know what server to run?


